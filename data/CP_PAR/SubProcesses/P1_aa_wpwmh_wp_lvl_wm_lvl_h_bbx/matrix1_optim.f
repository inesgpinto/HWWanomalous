      SUBROUTINE SMATRIX1(P,ANS)
C     
C     Generated by MadGraph5_aMC@NLO v. 3.3.1, 2021-12-04
C     By the MadGraph5_aMC@NLO Development Team
C     Visit launchpad.net/madgraph5 and amcatnlo.web.cern.ch
C     
C     MadGraph5_aMC@NLO for Madevent Version
C     
C     Returns amplitude squared summed/avg over colors
C     and helicities
C     for the point in phase space P(0:3,NEXTERNAL)
C     
C     Process: a a > w+ w- h NP<=1 QED<=3 @1
C     *   Decay: w+ > e+ ve WEIGHTED<=2
C     *   Decay: w- > e- ve~ WEIGHTED<=2
C     *   Decay: h > b b~ WEIGHTED<=2
C     Process: a a > w+ w- h NP<=1 QED<=3 @1
C     *   Decay: w+ > e+ ve WEIGHTED<=2
C     *   Decay: w- > mu- vm~ WEIGHTED<=2
C     *   Decay: h > b b~ WEIGHTED<=2
C     Process: a a > w+ w- h NP<=1 QED<=3 @1
C     *   Decay: w+ > mu+ vm WEIGHTED<=2
C     *   Decay: w- > e- ve~ WEIGHTED<=2
C     *   Decay: h > b b~ WEIGHTED<=2
C     Process: a a > w+ w- h NP<=1 QED<=3 @1
C     *   Decay: w+ > mu+ vm WEIGHTED<=2
C     *   Decay: w- > mu- vm~ WEIGHTED<=2
C     *   Decay: h > b b~ WEIGHTED<=2
C     
      IMPLICIT NONE
C     
C     CONSTANTS
C     
      Include 'genps.inc'
      Include 'maxconfigs.inc'
      Include 'nexternal.inc'
      Include 'maxamps.inc'
      INTEGER                 NCOMB         
      PARAMETER (             NCOMB=16)
      INTEGER    NGRAPHS
      PARAMETER (NGRAPHS=38) 
      INTEGER    NDIAGS
      PARAMETER (NDIAGS=38) 
      INTEGER    THEL
      PARAMETER (THEL=2*NCOMB)
C     
C     ARGUMENTS 
C     
      REAL*8 P(0:3,NEXTERNAL),ANS
C     
C     LOCAL VARIABLES 
C     
      INTEGER CONFSUB(MAXSPROC,LMAXCONFIGS)
      INCLUDE 'config_subproc_map.inc'
      INTEGER NHEL(NEXTERNAL,NCOMB)
      REAL*8 T
      REAL*8 R,SUMHEL,TS(NCOMB)
      INTEGER I,IDEN
      INTEGER JC(NEXTERNAL),II
      REAL*8 XTOT
      INTEGER  J, JJ

      double precision get_channel_cut
      external get_channel_cut

C     
C     GLOBAL VARIABLES
C     
      DOUBLE PRECISION AMP2(MAXAMPS), JAMP2(0:MAXFLOW)
      COMMON/TO_AMPS/  AMP2,       JAMP2


C     
C     INFORMATION TO WRITE THE HELICITY IN THE EVENT --not memory
C      efficient--
C     
      CHARACTER*101         HEL_BUFF
      COMMON/TO_HELICITY/  HEL_BUFF

      INTEGER NB_SPIN_STATE_in(2)
      common /nb_hel_state/ nb_spin_state_in

      REAL*8 POL(2)

      COMMON/TO_POLARIZATION/ POL
      double precision tmin_for_channel
      integer sde_strat   ! 1 means standard single diagram enhancement strategy,
C     2 means approximation by the	denominator of the propagator
      common/TO_CHANNEL_STRAT/tmin_for_channel,	sde_strat

      INTEGER          ISUM_HEL
      LOGICAL                    MULTI_CHANNEL
      COMMON/TO_MATRIX/ISUM_HEL, MULTI_CHANNEL
      INTEGER MAPCONFIG(0:LMAXCONFIGS), ICONFIG
      COMMON/TO_MCONFIGS/MAPCONFIG, ICONFIG
      INTEGER SUBDIAG(MAXSPROC),IB(2)
      COMMON/TO_SUB_DIAG/SUBDIAG,IB
      
      DATA (NHEL(I,1),I=1,8) /-1,-1, 1,-1,-1, 1,-1, 1/
      DATA (NHEL(I,2),I=1,8) /-1,-1, 1,-1,-1, 1,-1,-1/
      DATA (NHEL(I,3),I=1,8) /-1,-1, 1,-1,-1, 1, 1, 1/
      DATA (NHEL(I,4),I=1,8) /-1,-1, 1,-1,-1, 1, 1,-1/
      DATA (NHEL(I,5),I=1,8) /-1, 1, 1,-1,-1, 1,-1, 1/
      DATA (NHEL(I,6),I=1,8) /-1, 1, 1,-1,-1, 1,-1,-1/
      DATA (NHEL(I,7),I=1,8) /-1, 1, 1,-1,-1, 1, 1, 1/
      DATA (NHEL(I,8),I=1,8) /-1, 1, 1,-1,-1, 1, 1,-1/
      DATA (NHEL(I,9),I=1,8) / 1,-1, 1,-1,-1, 1,-1, 1/
      DATA (NHEL(I,10),I=1,8) / 1,-1, 1,-1,-1, 1,-1,-1/
      DATA (NHEL(I,11),I=1,8) / 1,-1, 1,-1,-1, 1, 1, 1/
      DATA (NHEL(I,12),I=1,8) / 1,-1, 1,-1,-1, 1, 1,-1/
      DATA (NHEL(I,13),I=1,8) / 1, 1, 1,-1,-1, 1,-1, 1/
      DATA (NHEL(I,14),I=1,8) / 1, 1, 1,-1,-1, 1,-1,-1/
      DATA (NHEL(I,15),I=1,8) / 1, 1, 1,-1,-1, 1, 1, 1/
      DATA (NHEL(I,16),I=1,8) / 1, 1, 1,-1,-1, 1, 1,-1/
      DATA IDEN/ 4/

C     ----------
C     BEGIN CODE
C     ----------

      DO I=1,NEXTERNAL
        JC(I) = +1
      ENDDO

      IF (multi_channel) THEN
        DO I=1,NDIAGS
          AMP2(I)=0D0
        ENDDO
        JAMP2(0)=1
        DO I=1,INT(JAMP2(0))
          JAMP2(I)=0D0
        ENDDO
      ENDIF
      ANS = 0D0
      WRITE(HEL_BUFF,'(20I5)') (0,I=1,NEXTERNAL)
C     Kiran please check if you need this:    
      DO I=1,NCOMB
        TS(I)=0d0
      ENDDO

      call MATRIX1(P ,JC(1), TS)
      DO I=1,NCOMB     
        T=TS(I)  
        DO JJ=1,nincoming
          IF(POL(JJ).NE.1d0.AND.NHEL(JJ,I).EQ.INT(SIGN(1d0,POL(JJ))))
     $      THEN
            T=T*ABS(POL(JJ))*NB_SPIN_STATE_IN(JJ)/2d0   ! NB_SPIN_STATE(JJ)/2d0 is added for polarised beam
          ELSE IF(POL(JJ).NE.1d0)THEN
            T=T*(2d0-ABS(POL(JJ)))*NB_SPIN_STATE_IN(JJ)/2d0
          ENDIF
        ENDDO
        ANS=ANS+DABS(T)
        TS(I)=T
      ENDDO

      IF (ANS.ne.0d0) THEN
        CALL RANMAR(R)
        SUMHEL=0d0
        DO I=1,NCOMB
          SUMHEL=SUMHEL+DABS(TS(I))/ANS
          IF(R.LT.SUMHEL)THEN
            WRITE(HEL_BUFF,'(20i5)')(NHEL(II,I),II=1,NEXTERNAL)
C           Set right sign for ANS, based on sign of chosen helicity
            ANS=DSIGN(ANS,TS(I))
            GOTO 10
          ENDIF
        ENDDO
 10     CONTINUE   
      ENDIF
      IF (MULTI_CHANNEL) THEN
        XTOT=0D0
        DO I=1,LMAXCONFIGS
          J = CONFSUB(1, I)
          if (J.ne.0)then
            if (sde_strat.eq.1)then
              AMP2(J) = AMP2(J) * GET_CHANNEL_CUT(P, I)
            else
              AMP2(J) = GET_CHANNEL_CUT(P, I)
            endif
            XTOT=XTOT+AMP2(J)

          endif
        ENDDO
        IF (XTOT.NE.0D0) THEN
          ANS=ANS*AMP2(SUBDIAG(1))/XTOT
        ELSE IF(ANS.ne.0d0) THEN
          write(*,*) 'Problem in the multi-channeling. All amp2 are'
     $     //' zero but not the total matrix-element'
          stop 1
        ENDIF
      ENDIF
      ANS=ANS/DBLE(IDEN)
      END


      Subroutine  MATRIX1(P,IC, TS)
C     
C     Generated by MadGraph5_aMC@NLO v. 3.3.1, 2021-12-04
C     By the MadGraph5_aMC@NLO Development Team
C     Visit launchpad.net/madgraph5 and amcatnlo.web.cern.ch
C     
C     Returns amplitude squared summed/avg over colors
C     for the point with external lines W(0:6,NEXTERNAL)
C     
C     Process: a a > w+ w- h NP<=1 QED<=3 @1
C     *   Decay: w+ > e+ ve WEIGHTED<=2
C     *   Decay: w- > e- ve~ WEIGHTED<=2
C     *   Decay: h > b b~ WEIGHTED<=2
C     Process: a a > w+ w- h NP<=1 QED<=3 @1
C     *   Decay: w+ > e+ ve WEIGHTED<=2
C     *   Decay: w- > mu- vm~ WEIGHTED<=2
C     *   Decay: h > b b~ WEIGHTED<=2
C     Process: a a > w+ w- h NP<=1 QED<=3 @1
C     *   Decay: w+ > mu+ vm WEIGHTED<=2
C     *   Decay: w- > e- ve~ WEIGHTED<=2
C     *   Decay: h > b b~ WEIGHTED<=2
C     Process: a a > w+ w- h NP<=1 QED<=3 @1
C     *   Decay: w+ > mu+ vm WEIGHTED<=2
C     *   Decay: w- > mu- vm~ WEIGHTED<=2
C     *   Decay: h > b b~ WEIGHTED<=2
C     
      IMPLICIT NONE
C     
C     CONSTANTS
C     
      INTEGER    NGRAPHS
      PARAMETER (NGRAPHS=38) 
      include 'genps.inc'
      include 'nexternal.inc'
      include 'maxamps.inc'
      INTEGER    NWAVEFUNCS,     NCOLOR
      PARAMETER (NWAVEFUNCS=123, NCOLOR=1) 
      REAL*8     ZERO
      PARAMETER (ZERO=0D0)
      COMPLEX*16 IMAG1
      PARAMETER (IMAG1=(0D0,1D0))
      INTEGER NAMPSO, NSQAMPSO
      PARAMETER (NAMPSO=1, NSQAMPSO=1)
      LOGICAL CHOSEN_SO_CONFIGS(NSQAMPSO)
      DATA CHOSEN_SO_CONFIGS/.TRUE./
      SAVE CHOSEN_SO_CONFIGS
      INTEGER                 NCOMB         
      PARAMETER (             NCOMB=16)
C     
C     ARGUMENTS 
C     
      REAL*8 P(0:3,NEXTERNAL)
      INTEGER NHEL(NEXTERNAL), IC(NEXTERNAL)
      REAL*8 TS(NCOMB)
C     
C     LOCAL VARIABLES 
C     
      INTEGER I,J,M,N,K
      COMPLEX*16 ZTEMP,TMP_JAMP(0)
      COMPLEX*16 TMP(6)
      REAL*8 CF(NCOLOR,NCOLOR)
      COMPLEX*16 AMP(NCOMB,NGRAPHS), JAMP(NCOLOR,NAMPSO)
      COMPLEX*16 W(6,NWAVEFUNCS)
C     Needed for v4 models
      COMPLEX*16 DUM0,DUM1
      DATA DUM0, DUM1/(0d0, 0d0), (1d0, 0d0)/

      double precision fk_mdl_WZ 
      double precision fk_mdl_WH 
      double precision fk_ZERO 
      double precision fk_mdl_WW 
      save fk_mdl_WZ 
      save fk_mdl_WH 
      save fk_ZERO 
      save fk_mdl_WW 

      logical first
      data first /.true./
      save first
C     
C     FUNCTION
C     
      INTEGER SQSOINDEX1

C     
C     GLOBAL VARIABLES
C     
      Double Precision amp2(maxamps), jamp2(0:maxflow)
      common/to_amps/  amp2,       jamp2
      include 'coupl.inc'

      double precision tmin_for_channel
      integer sde_strat   ! 1 means standard single diagram enhancement strategy,
C     2 means approximation by the	denominator of the propagator
      common/TO_CHANNEL_STRAT/tmin_for_channel,	sde_strat

      double precision small_width_treatment
      common/narrow_width/small_width_treatment
C     
C     COLOR DATA
C     
      DATA (CF(i,  1),i=  1,  1) /3.000000000000000d+00/
C     1 T(7,8)
C     ----------
C     BEGIN CODE
C     ----------
      if (first) then
        first=.false.
        IF(ZERO.ne.0d0) fk_ZERO = SIGN(MAX(ABS(ZERO), ABS(ZERO
     $   *small_width_treatment)), ZERO)
        IF(ZERO.ne.0d0) fk_ZERO = SIGN(MAX(ABS(ZERO), ABS(mdl_MB
     $   *small_width_treatment)), ZERO)
        IF(mdl_WH.ne.0d0) fk_mdl_WH = SIGN(MAX(ABS(mdl_WH), ABS(mdl_MH
     $   *small_width_treatment)), mdl_WH)
        IF(mdl_WW.ne.0d0) fk_mdl_WW = SIGN(MAX(ABS(mdl_WW), ABS(mdl_MW
     $   *small_width_treatment)), mdl_WW)
        IF(mdl_WZ.ne.0d0) fk_mdl_WZ = SIGN(MAX(ABS(mdl_WZ), ABS(mdl_MZ
     $   *small_width_treatment)), mdl_WZ)
      endif
      AMP(:,:) = (0d0,0d0)
            CALL VXXXXX(P(0,1),ZERO,+1,-1*IC(1),W(1,1)) ! count 69
      CALL VXXXXX(P(0,1),ZERO,-1,-1*IC(1),W(1,2)) ! count 69
      CALL VXXXXX(P(0,2),ZERO,+1,-1*IC(2),W(1,3)) ! count 123
      CALL VXXXXX(P(0,2),ZERO,-1,-1*IC(2),W(1,4)) ! count 123
      CALL IXXXXX(P(0,3),ZERO,+1,-1*IC(3),W(1,5)) ! count 1
      CALL OXXXXX(P(0,4),ZERO,-1,+1*IC(4),W(1,6)) ! count 1
      CALL FFV3_3(W(1,5),W(1,6),GC_125,MDL_MW, FK_MDL_WW,W(1,7)) ! count 229
      CALL OXXXXX(P(0,5),ZERO,-1,+1*IC(5),W(1,8)) ! count 1
      CALL IXXXXX(P(0,6),ZERO,+1,-1*IC(6),W(1,9)) ! count 1
      CALL FFV3_3(W(1,9),W(1,8),GC_125,MDL_MW, FK_MDL_WW,W(1,10)) ! count 229
      CALL OXXXXX(P(0,7),MDL_MB,+1,+1*IC(7),W(1,11)) ! count 2
      CALL OXXXXX(P(0,7),MDL_MB,-1,+1*IC(7),W(1,12)) ! count 2
      CALL IXXXXX(P(0,8),MDL_MB,+1,-1*IC(8),W(1,13)) ! count 2
      CALL IXXXXX(P(0,8),MDL_MB,-1,-1*IC(8),W(1,14)) ! count 2
      CALL FFS2_3(W(1,13),W(1,11),GC_451,MDL_MH, FK_MDL_WH,W(1,15)) ! count 74
      CALL FFS2_3(W(1,13),W(1,12),GC_451,MDL_MH, FK_MDL_WH,W(1,16)) ! count 74
      CALL FFS2_3(W(1,14),W(1,11),GC_451,MDL_MH, FK_MDL_WH,W(1,17)) ! count 74
      CALL FFS2_3(W(1,14),W(1,12),GC_451,MDL_MH, FK_MDL_WH,W(1,18)) ! count 74
      CALL VVVVS6P1N_5(W(1,1), W(1,3), W(1,10), W(1,7), GC_276, TMP(1))
      call CombineAmpS(4, 
     &(/15,13,16,14/), 
     & (/15,16,17,18/), 
     & TMP, W, AMP(1,1))
      CALL VVVVS6P1N_5(W(1,1), W(1,4), W(1,10), W(1,7), GC_276, TMP(1))
      call CombineAmpS(4, 
     &(/11,9,12,10/), 
     & (/15,16,17,18/), 
     & TMP, W, AMP(1,1))
      CALL VVVVS6P1N_5(W(1,2), W(1,3), W(1,10), W(1,7), GC_276, TMP(1))
      call CombineAmpS(4, 
     &(/7,5,8,6/), 
     & (/15,16,17,18/), 
     & TMP, W, AMP(1,1))
      CALL VVVVS6P1N_5(W(1,2), W(1,4), W(1,10), W(1,7), GC_276, TMP(1))
      call CombineAmpS(4, 
     &(/3,1,4,2/), 
     & (/15,16,17,18/), 
     & TMP, W, AMP(1,1)) ! count 1
      CALL VVS4_3(W(1,1),W(1,3),GC_328,MDL_MH, FK_MDL_WH,W(1,19)) ! count 16
      CALL VVS4_3(W(1,2),W(1,4),GC_328,MDL_MH, FK_MDL_WH,W(1,22)) ! count 16
      CALL VVS3_3(W(1,10),W(1,7),GC_283,MDL_MH, FK_MDL_WH,W(1,23)) ! count 8
      CALL SSS1P1N_3(W(1,19), W(1,23), GC_260, TMP(1))
      call CombineAmpS(4, 
     &(/15,13,16,14/), 
     & (/15,16,17,18/), 
     & TMP, W, AMP(1,2))
      CALL SSS1P1N_3(W(1,22), W(1,23), GC_260, TMP(1))
      call CombineAmpS(4, 
     &(/3,1,4,2/), 
     & (/15,16,17,18/), 
     & TMP, W, AMP(1,2)) ! count 1
      CALL VVS3_1(W(1,7),W(1,15),GC_283,MDL_MW, FK_MDL_WW,W(1,24)) ! count 10
      CALL VVS3_1(W(1,7),W(1,16),GC_283,MDL_MW, FK_MDL_WW,W(1,25)) ! count 10
      CALL VVS3_1(W(1,7),W(1,17),GC_283,MDL_MW, FK_MDL_WW,W(1,26)) ! count 10
      CALL VVS3_1(W(1,7),W(1,18),GC_283,MDL_MW, FK_MDL_WW,W(1,27)) ! count 10
      CALL VVS3P1N_2(W(1,10), W(1,19), GC_283, TMP(1))
      call CombineAmp(4,
     & (/15,13,16,14/), 
     & (/24,25,26,27/),
     & TMP, W, AMP(1,3))
      CALL VVS3P1N_2(W(1,10), W(1,22), GC_283, TMP(1))
      call CombineAmp(4,
     & (/3,1,4,2/), 
     & (/24,25,26,27/),
     & TMP, W, AMP(1,3)) ! count 1
      CALL VVS3_2(W(1,10),W(1,15),GC_283,MDL_MW, FK_MDL_WW,W(1,28)) ! count 10
      CALL VVS3_2(W(1,10),W(1,16),GC_283,MDL_MW, FK_MDL_WW,W(1,29)) ! count 10
      CALL VVS3_2(W(1,10),W(1,17),GC_283,MDL_MW, FK_MDL_WW,W(1,30)) ! count 10
      CALL VVS3_2(W(1,10),W(1,18),GC_283,MDL_MW, FK_MDL_WW,W(1,31)) ! count 10
      CALL VVS3P1N_1(W(1,7), W(1,19), GC_283, TMP(1))
      call CombineAmp(4,
     & (/15,13,16,14/), 
     & (/28,29,30,31/),
     & TMP, W, AMP(1,4))
      CALL VVS3P1N_1(W(1,7), W(1,22), GC_283, TMP(1))
      call CombineAmp(4,
     & (/3,1,4,2/), 
     & (/28,29,30,31/),
     & TMP, W, AMP(1,4)) ! count 1
      CALL VVSS3P1N_3(W(1,10), W(1,7), W(1,19), GC_97, TMP(1))
      call CombineAmpS(4, 
     &(/15,13,16,14/), 
     & (/15,16,17,18/), 
     & TMP, W, AMP(1,5))
      CALL VVSS3P1N_3(W(1,10), W(1,7), W(1,22), GC_97, TMP(1))
      call CombineAmpS(4, 
     &(/3,1,4,2/), 
     & (/15,16,17,18/), 
     & TMP, W, AMP(1,5)) ! count 1
      CALL VVV5_2(W(1,1),W(1,7),GC_3,MDL_MW, ZERO,W(1,32)) ! count 56
      CALL VVV5_2(W(1,2),W(1,7),GC_3,MDL_MW, ZERO,W(1,33)) ! count 56
      CALL VVV5_3(W(1,3),W(1,10),GC_3,MDL_MW, ZERO,W(1,34)) ! count 48
      CALL VVV5_3(W(1,4),W(1,10),GC_3,MDL_MW, ZERO,W(1,35)) ! count 48
      CALL VVS4P1N_3(W(1,34), W(1,32), GC_266, TMP(1))
      call CombineAmpS(4, 
     &(/15,13,16,14/), 
     & (/15,16,17,18/), 
     & TMP, W, AMP(1,6))
      CALL VVS4P1N_3(W(1,34), W(1,33), GC_266, TMP(1))
      call CombineAmpS(4, 
     &(/7,5,8,6/), 
     & (/15,16,17,18/), 
     & TMP, W, AMP(1,6))
      CALL VVS4P1N_3(W(1,35), W(1,32), GC_266, TMP(1))
      call CombineAmpS(4, 
     &(/11,9,12,10/), 
     & (/15,16,17,18/), 
     & TMP, W, AMP(1,6))
      CALL VVS4P1N_3(W(1,35), W(1,33), GC_266, TMP(1))
      call CombineAmpS(4, 
     &(/3,1,4,2/), 
     & (/15,16,17,18/), 
     & TMP, W, AMP(1,6)) ! count 1
      CALL VVS3P1N_3(W(1,34), W(1,32), GC_283, TMP(1))
      call CombineAmpS(4, 
     &(/15,13,16,14/), 
     & (/15,16,17,18/), 
     & TMP, W, AMP(1,7))
      CALL VVS3P1N_3(W(1,34), W(1,33), GC_283, TMP(1))
      call CombineAmpS(4, 
     &(/7,5,8,6/), 
     & (/15,16,17,18/), 
     & TMP, W, AMP(1,7))
      CALL VVS3P1N_3(W(1,35), W(1,32), GC_283, TMP(1))
      call CombineAmpS(4, 
     &(/11,9,12,10/), 
     & (/15,16,17,18/), 
     & TMP, W, AMP(1,7))
      CALL VVS3P1N_3(W(1,35), W(1,33), GC_283, TMP(1))
      call CombineAmpS(4, 
     &(/3,1,4,2/), 
     & (/15,16,17,18/), 
     & TMP, W, AMP(1,7)) ! count 1
      CALL VVS4P0_1(W(1,3),W(1,15),GC_328,ZERO, FK_ZERO,W(1,36)) ! count 4
      CALL VVS4P0_1(W(1,3),W(1,16),GC_328,ZERO, FK_ZERO,W(1,37)) ! count 4
      CALL VVS4P0_1(W(1,3),W(1,17),GC_328,ZERO, FK_ZERO,W(1,38)) ! count 4
      CALL VVS4P0_1(W(1,3),W(1,18),GC_328,ZERO, FK_ZERO,W(1,39)) ! count 4
      CALL VVS4P0_1(W(1,4),W(1,15),GC_328,ZERO, FK_ZERO,W(1,40)) ! count 4
      CALL VVS4P0_1(W(1,4),W(1,16),GC_328,ZERO, FK_ZERO,W(1,41)) ! count 4
      CALL VVS4P0_1(W(1,4),W(1,17),GC_328,ZERO, FK_ZERO,W(1,42)) ! count 4
      CALL VVS4P0_1(W(1,4),W(1,18),GC_328,ZERO, FK_ZERO,W(1,43)) ! count 4
      CALL VVV5P1N_1(W(1,10), W(1,32), GC_3, TMP(1))
      call CombineAmp(8,
     & (/15,13,16,14,11,9,12,10/), 
     & (/36,37,38,39,40,41,42,43/),
     & TMP, W, AMP(1,8))
      CALL VVV5P1N_1(W(1,10), W(1,33), GC_3, TMP(1))
      call CombineAmp(8,
     & (/7,5,8,6,3,1,4,2/), 
     & (/36,37,38,39,40,41,42,43/),
     & TMP, W, AMP(1,8)) ! count 1
      CALL VVS4_2(W(1,3),W(1,15),GC_320,MDL_MZ, ZERO,W(1,44)) ! count 4
      CALL VVS4_2(W(1,3),W(1,16),GC_320,MDL_MZ, ZERO,W(1,45)) ! count 4
      CALL VVS4_2(W(1,3),W(1,17),GC_320,MDL_MZ, ZERO,W(1,46)) ! count 4
      CALL VVS4_2(W(1,3),W(1,18),GC_320,MDL_MZ, ZERO,W(1,47)) ! count 4
      CALL VVS4_2(W(1,4),W(1,15),GC_320,MDL_MZ, ZERO,W(1,48)) ! count 4
      CALL VVS4_2(W(1,4),W(1,16),GC_320,MDL_MZ, ZERO,W(1,49)) ! count 4
      CALL VVS4_2(W(1,4),W(1,17),GC_320,MDL_MZ, ZERO,W(1,50)) ! count 4
      CALL VVS4_2(W(1,4),W(1,18),GC_320,MDL_MZ, ZERO,W(1,51)) ! count 4
      CALL VVV5P1N_3(W(1,10), W(1,32), GC_137, TMP(1))
      call CombineAmp(8,
     & (/15,13,16,14,11,9,12,10/), 
     & (/44,45,46,47,48,49,50,51/),
     & TMP, W, AMP(1,9))
      CALL VVV5P1N_3(W(1,10), W(1,33), GC_137, TMP(1))
      call CombineAmp(8,
     & (/7,5,8,6,3,1,4,2/), 
     & (/44,45,46,47,48,49,50,51/),
     & TMP, W, AMP(1,9)) ! count 1
      CALL VVS4_2(W(1,10),W(1,15),GC_266,MDL_MW, FK_MDL_WW,W(1,52)) ! count 8
      CALL VVS4_2(W(1,10),W(1,16),GC_266,MDL_MW, FK_MDL_WW,W(1,53)) ! count 8
      CALL VVS4_2(W(1,10),W(1,17),GC_266,MDL_MW, FK_MDL_WW,W(1,54)) ! count 8
      CALL VVS4_2(W(1,10),W(1,18),GC_266,MDL_MW, FK_MDL_WW,W(1,55)) ! count 8
      CALL VVV5P1N_2(W(1,3), W(1,32), GC_3, TMP(1))
      call CombineAmp(4,
     & (/15,13,16,14/), 
     & (/52,53,54,55/),
     & TMP, W, AMP(1,10))
      CALL VVV5P1N_2(W(1,3), W(1,33), GC_3, TMP(1))
      call CombineAmp(4,
     & (/7,5,8,6/), 
     & (/52,53,54,55/),
     & TMP, W, AMP(1,10))
      CALL VVV5P1N_2(W(1,4), W(1,32), GC_3, TMP(1))
      call CombineAmp(4,
     & (/11,9,12,10/), 
     & (/52,53,54,55/),
     & TMP, W, AMP(1,10))
      CALL VVV5P1N_2(W(1,4), W(1,33), GC_3, TMP(1))
      call CombineAmp(4,
     & (/3,1,4,2/), 
     & (/52,53,54,55/),
     & TMP, W, AMP(1,10)) ! count 1
      CALL VVV5P1N_2(W(1,3), W(1,32), GC_3, TMP(1))
      call CombineAmp(4,
     & (/15,13,16,14/), 
     & (/28,29,30,31/),
     & TMP, W, AMP(1,11))
      CALL VVV5P1N_2(W(1,3), W(1,33), GC_3, TMP(1))
      call CombineAmp(4,
     & (/7,5,8,6/), 
     & (/28,29,30,31/),
     & TMP, W, AMP(1,11))
      CALL VVV5P1N_2(W(1,4), W(1,32), GC_3, TMP(1))
      call CombineAmp(4,
     & (/11,9,12,10/), 
     & (/28,29,30,31/),
     & TMP, W, AMP(1,11))
      CALL VVV5P1N_2(W(1,4), W(1,33), GC_3, TMP(1))
      call CombineAmp(4,
     & (/3,1,4,2/), 
     & (/28,29,30,31/),
     & TMP, W, AMP(1,11)) ! count 1
      CALL VVVS6P1N_4(W(1,3), W(1,10), W(1,32), GC_272, TMP(1))
      call CombineAmpS(4, 
     &(/15,13,16,14/), 
     & (/15,16,17,18/), 
     & TMP, W, AMP(1,12))
      CALL VVVS6P1N_4(W(1,3), W(1,10), W(1,33), GC_272, TMP(1))
      call CombineAmpS(4, 
     &(/7,5,8,6/), 
     & (/15,16,17,18/), 
     & TMP, W, AMP(1,12))
      CALL VVVS6P1N_4(W(1,4), W(1,10), W(1,32), GC_272, TMP(1))
      call CombineAmpS(4, 
     &(/11,9,12,10/), 
     & (/15,16,17,18/), 
     & TMP, W, AMP(1,12))
      CALL VVVS6P1N_4(W(1,4), W(1,10), W(1,33), GC_272, TMP(1))
      call CombineAmpS(4, 
     &(/3,1,4,2/), 
     & (/15,16,17,18/), 
     & TMP, W, AMP(1,12)) ! count 1
      CALL VVV5_3(W(1,1),W(1,10),GC_3,MDL_MW, ZERO,W(1,56)) ! count 56
      CALL VVV5_3(W(1,2),W(1,10),GC_3,MDL_MW, ZERO,W(1,57)) ! count 56
      CALL VVV5_2(W(1,3),W(1,7),GC_3,MDL_MW, ZERO,W(1,58)) ! count 48
      CALL VVV5_2(W(1,4),W(1,7),GC_3,MDL_MW, ZERO,W(1,59)) ! count 48
      CALL VVS4P1N_3(W(1,56), W(1,58), GC_266, TMP(1))
      call CombineAmpS(4, 
     &(/15,13,16,14/), 
     & (/15,16,17,18/), 
     & TMP, W, AMP(1,13))
      CALL VVS4P1N_3(W(1,56), W(1,59), GC_266, TMP(1))
      call CombineAmpS(4, 
     &(/11,9,12,10/), 
     & (/15,16,17,18/), 
     & TMP, W, AMP(1,13))
      CALL VVS4P1N_3(W(1,57), W(1,58), GC_266, TMP(1))
      call CombineAmpS(4, 
     &(/7,5,8,6/), 
     & (/15,16,17,18/), 
     & TMP, W, AMP(1,13))
      CALL VVS4P1N_3(W(1,57), W(1,59), GC_266, TMP(1))
      call CombineAmpS(4, 
     &(/3,1,4,2/), 
     & (/15,16,17,18/), 
     & TMP, W, AMP(1,13)) ! count 1
      CALL VVS3P1N_3(W(1,56), W(1,58), GC_283, TMP(1))
      call CombineAmpS(4, 
     &(/15,13,16,14/), 
     & (/15,16,17,18/), 
     & TMP, W, AMP(1,14))
      CALL VVS3P1N_3(W(1,56), W(1,59), GC_283, TMP(1))
      call CombineAmpS(4, 
     &(/11,9,12,10/), 
     & (/15,16,17,18/), 
     & TMP, W, AMP(1,14))
      CALL VVS3P1N_3(W(1,57), W(1,58), GC_283, TMP(1))
      call CombineAmpS(4, 
     &(/7,5,8,6/), 
     & (/15,16,17,18/), 
     & TMP, W, AMP(1,14))
      CALL VVS3P1N_3(W(1,57), W(1,59), GC_283, TMP(1))
      call CombineAmpS(4, 
     &(/3,1,4,2/), 
     & (/15,16,17,18/), 
     & TMP, W, AMP(1,14)) ! count 1
      CALL VVV5P1N_1(W(1,56), W(1,7), GC_3, TMP(1))
      call CombineAmp(8,
     & (/15,13,16,14,11,9,12,10/), 
     & (/36,37,38,39,40,41,42,43/),
     & TMP, W, AMP(1,15))
      CALL VVV5P1N_1(W(1,57), W(1,7), GC_3, TMP(1))
      call CombineAmp(8,
     & (/7,5,8,6,3,1,4,2/), 
     & (/36,37,38,39,40,41,42,43/),
     & TMP, W, AMP(1,15)) ! count 1
      CALL VVV5P1N_3(W(1,56), W(1,7), GC_137, TMP(1))
      call CombineAmp(8,
     & (/15,13,16,14,11,9,12,10/), 
     & (/44,45,46,47,48,49,50,51/),
     & TMP, W, AMP(1,16))
      CALL VVV5P1N_3(W(1,57), W(1,7), GC_137, TMP(1))
      call CombineAmp(8,
     & (/7,5,8,6,3,1,4,2/), 
     & (/44,45,46,47,48,49,50,51/),
     & TMP, W, AMP(1,16)) ! count 1
      CALL VVS4_1(W(1,7),W(1,15),GC_266,MDL_MW, FK_MDL_WW,W(1,60)) ! count 8
      CALL VVS4_1(W(1,7),W(1,16),GC_266,MDL_MW, FK_MDL_WW,W(1,61)) ! count 8
      CALL VVS4_1(W(1,7),W(1,17),GC_266,MDL_MW, FK_MDL_WW,W(1,62)) ! count 8
      CALL VVS4_1(W(1,7),W(1,18),GC_266,MDL_MW, FK_MDL_WW,W(1,63)) ! count 8
      CALL VVV5P1N_3(W(1,3), W(1,56), GC_3, TMP(1))
      call CombineAmp(4,
     & (/15,13,16,14/), 
     & (/60,61,62,63/),
     & TMP, W, AMP(1,17))
      CALL VVV5P1N_3(W(1,3), W(1,57), GC_3, TMP(1))
      call CombineAmp(4,
     & (/7,5,8,6/), 
     & (/60,61,62,63/),
     & TMP, W, AMP(1,17))
      CALL VVV5P1N_3(W(1,4), W(1,56), GC_3, TMP(1))
      call CombineAmp(4,
     & (/11,9,12,10/), 
     & (/60,61,62,63/),
     & TMP, W, AMP(1,17))
      CALL VVV5P1N_3(W(1,4), W(1,57), GC_3, TMP(1))
      call CombineAmp(4,
     & (/3,1,4,2/), 
     & (/60,61,62,63/),
     & TMP, W, AMP(1,17)) ! count 1
      CALL VVV5P1N_3(W(1,3), W(1,56), GC_3, TMP(1))
      call CombineAmp(4,
     & (/15,13,16,14/), 
     & (/24,25,26,27/),
     & TMP, W, AMP(1,18))
      CALL VVV5P1N_3(W(1,3), W(1,57), GC_3, TMP(1))
      call CombineAmp(4,
     & (/7,5,8,6/), 
     & (/24,25,26,27/),
     & TMP, W, AMP(1,18))
      CALL VVV5P1N_3(W(1,4), W(1,56), GC_3, TMP(1))
      call CombineAmp(4,
     & (/11,9,12,10/), 
     & (/24,25,26,27/),
     & TMP, W, AMP(1,18))
      CALL VVV5P1N_3(W(1,4), W(1,57), GC_3, TMP(1))
      call CombineAmp(4,
     & (/3,1,4,2/), 
     & (/24,25,26,27/),
     & TMP, W, AMP(1,18)) ! count 1
      CALL VVVS6P1N_4(W(1,3), W(1,56), W(1,7), GC_272, TMP(1))
      call CombineAmpS(4, 
     &(/15,13,16,14/), 
     & (/15,16,17,18/), 
     & TMP, W, AMP(1,19))
      CALL VVVS6P1N_4(W(1,3), W(1,57), W(1,7), GC_272, TMP(1))
      call CombineAmpS(4, 
     &(/7,5,8,6/), 
     & (/15,16,17,18/), 
     & TMP, W, AMP(1,19))
      CALL VVVS6P1N_4(W(1,4), W(1,56), W(1,7), GC_272, TMP(1))
      call CombineAmpS(4, 
     &(/11,9,12,10/), 
     & (/15,16,17,18/), 
     & TMP, W, AMP(1,19))
      CALL VVVS6P1N_4(W(1,4), W(1,57), W(1,7), GC_272, TMP(1))
      call CombineAmpS(4, 
     &(/3,1,4,2/), 
     & (/15,16,17,18/), 
     & TMP, W, AMP(1,19)) ! count 1
      CALL VVS4P0_1(W(1,1),W(1,15),GC_328,ZERO, FK_ZERO,W(1,64)) ! count 6
      CALL VVS4P0_1(W(1,1),W(1,16),GC_328,ZERO, FK_ZERO,W(1,65)) ! count 6
      CALL VVS4P0_1(W(1,1),W(1,17),GC_328,ZERO, FK_ZERO,W(1,66)) ! count 6
      CALL VVS4P0_1(W(1,1),W(1,18),GC_328,ZERO, FK_ZERO,W(1,67)) ! count 6
      CALL VVS4P0_1(W(1,2),W(1,15),GC_328,ZERO, FK_ZERO,W(1,68)) ! count 6
      CALL VVS4P0_1(W(1,2),W(1,16),GC_328,ZERO, FK_ZERO,W(1,69)) ! count 6
      CALL VVS4P0_1(W(1,2),W(1,17),GC_328,ZERO, FK_ZERO,W(1,70)) ! count 6
      CALL VVS4P0_1(W(1,2),W(1,18),GC_328,ZERO, FK_ZERO,W(1,71)) ! count 6
      CALL VVV5P1N_1(W(1,10), W(1,58), GC_3, TMP(1))
      call CombineAmp(8,
     & (/15,13,16,14,7,5,8,6/), 
     & (/64,65,66,67,68,69,70,71/),
     & TMP, W, AMP(1,20))
      CALL VVV5P1N_1(W(1,10), W(1,59), GC_3, TMP(1))
      call CombineAmp(8,
     & (/11,9,12,10,3,1,4,2/), 
     & (/64,65,66,67,68,69,70,71/),
     & TMP, W, AMP(1,20)) ! count 1
      CALL VVS4_2(W(1,1),W(1,15),GC_320,MDL_MZ, ZERO,W(1,72)) ! count 6
      CALL VVS4_2(W(1,1),W(1,16),GC_320,MDL_MZ, ZERO,W(1,73)) ! count 6
      CALL VVS4_2(W(1,1),W(1,17),GC_320,MDL_MZ, ZERO,W(1,74)) ! count 6
      CALL VVS4_2(W(1,1),W(1,18),GC_320,MDL_MZ, ZERO,W(1,75)) ! count 6
      CALL VVS4_2(W(1,2),W(1,15),GC_320,MDL_MZ, ZERO,W(1,76)) ! count 6
      CALL VVS4_2(W(1,2),W(1,16),GC_320,MDL_MZ, ZERO,W(1,77)) ! count 6
      CALL VVS4_2(W(1,2),W(1,17),GC_320,MDL_MZ, ZERO,W(1,78)) ! count 6
      CALL VVS4_2(W(1,2),W(1,18),GC_320,MDL_MZ, ZERO,W(1,79)) ! count 6
      CALL VVV5P1N_3(W(1,10), W(1,58), GC_137, TMP(1))
      call CombineAmp(8,
     & (/15,13,16,14,7,5,8,6/), 
     & (/72,73,74,75,76,77,78,79/),
     & TMP, W, AMP(1,21))
      CALL VVV5P1N_3(W(1,10), W(1,59), GC_137, TMP(1))
      call CombineAmp(8,
     & (/11,9,12,10,3,1,4,2/), 
     & (/72,73,74,75,76,77,78,79/),
     & TMP, W, AMP(1,21)) ! count 1
      CALL VVV5P1N_1(W(1,34), W(1,7), GC_3, TMP(1))
      call CombineAmp(8,
     & (/15,13,16,14,7,5,8,6/), 
     & (/64,65,66,67,68,69,70,71/),
     & TMP, W, AMP(1,22))
      CALL VVV5P1N_1(W(1,35), W(1,7), GC_3, TMP(1))
      call CombineAmp(8,
     & (/11,9,12,10,3,1,4,2/), 
     & (/64,65,66,67,68,69,70,71/),
     & TMP, W, AMP(1,22)) ! count 1
      CALL VVV5P1N_3(W(1,34), W(1,7), GC_137, TMP(1))
      call CombineAmp(8,
     & (/15,13,16,14,7,5,8,6/), 
     & (/72,73,74,75,76,77,78,79/),
     & TMP, W, AMP(1,23))
      CALL VVV5P1N_3(W(1,35), W(1,7), GC_137, TMP(1))
      call CombineAmp(8,
     & (/11,9,12,10,3,1,4,2/), 
     & (/72,73,74,75,76,77,78,79/),
     & TMP, W, AMP(1,23)) ! count 1
      CALL VVVV8P1N_2(W(1,3), W(1,10), W(1,7), GC_5, TMP(1))
      call CombineAmp(8,
     & (/15,13,16,14,7,5,8,6/), 
     & (/64,65,66,67,68,69,70,71/),
     & TMP, W, AMP(1,24))
      CALL VVVV8P1N_2(W(1,4), W(1,10), W(1,7), GC_5, TMP(1))
      call CombineAmp(8,
     & (/11,9,12,10,3,1,4,2/), 
     & (/64,65,66,67,68,69,70,71/),
     & TMP, W, AMP(1,24)) ! count 1
      CALL VVVV11P1N_4(W(1,3), W(1,10), W(1,7), GC_138, TMP(1))
      call CombineAmp(8,
     & (/15,13,16,14,7,5,8,6/), 
     & (/72,73,74,75,76,77,78,79/),
     & TMP, W, AMP(1,25))
      CALL VVVV11P1N_4(W(1,4), W(1,10), W(1,7), GC_138, TMP(1))
      call CombineAmp(8,
     & (/11,9,12,10,3,1,4,2/), 
     & (/72,73,74,75,76,77,78,79/),
     & TMP, W, AMP(1,25)) ! count 1
      CALL VVV5P1N_2(W(1,1), W(1,58), GC_3, TMP(1))
      call CombineAmp(4,
     & (/15,13,16,14/), 
     & (/52,53,54,55/),
     & TMP, W, AMP(1,26))
      CALL VVV5P1N_2(W(1,1), W(1,59), GC_3, TMP(1))
      call CombineAmp(4,
     & (/11,9,12,10/), 
     & (/52,53,54,55/),
     & TMP, W, AMP(1,26))
      CALL VVV5P1N_2(W(1,2), W(1,58), GC_3, TMP(1))
      call CombineAmp(4,
     & (/7,5,8,6/), 
     & (/52,53,54,55/),
     & TMP, W, AMP(1,26))
      CALL VVV5P1N_2(W(1,2), W(1,59), GC_3, TMP(1))
      call CombineAmp(4,
     & (/3,1,4,2/), 
     & (/52,53,54,55/),
     & TMP, W, AMP(1,26)) ! count 1
      CALL VVV5P1N_2(W(1,1), W(1,58), GC_3, TMP(1))
      call CombineAmp(4,
     & (/15,13,16,14/), 
     & (/28,29,30,31/),
     & TMP, W, AMP(1,27))
      CALL VVV5P1N_2(W(1,1), W(1,59), GC_3, TMP(1))
      call CombineAmp(4,
     & (/11,9,12,10/), 
     & (/28,29,30,31/),
     & TMP, W, AMP(1,27))
      CALL VVV5P1N_2(W(1,2), W(1,58), GC_3, TMP(1))
      call CombineAmp(4,
     & (/7,5,8,6/), 
     & (/28,29,30,31/),
     & TMP, W, AMP(1,27))
      CALL VVV5P1N_2(W(1,2), W(1,59), GC_3, TMP(1))
      call CombineAmp(4,
     & (/3,1,4,2/), 
     & (/28,29,30,31/),
     & TMP, W, AMP(1,27)) ! count 1
      CALL VVV5P1N_3(W(1,1), W(1,34), GC_3, TMP(1))
      call CombineAmp(4,
     & (/15,13,16,14/), 
     & (/60,61,62,63/),
     & TMP, W, AMP(1,28))
      CALL VVV5P1N_3(W(1,1), W(1,35), GC_3, TMP(1))
      call CombineAmp(4,
     & (/11,9,12,10/), 
     & (/60,61,62,63/),
     & TMP, W, AMP(1,28))
      CALL VVV5P1N_3(W(1,2), W(1,34), GC_3, TMP(1))
      call CombineAmp(4,
     & (/7,5,8,6/), 
     & (/60,61,62,63/),
     & TMP, W, AMP(1,28))
      CALL VVV5P1N_3(W(1,2), W(1,35), GC_3, TMP(1))
      call CombineAmp(4,
     & (/3,1,4,2/), 
     & (/60,61,62,63/),
     & TMP, W, AMP(1,28)) ! count 1
      CALL VVV5P1N_3(W(1,1), W(1,34), GC_3, TMP(1))
      call CombineAmp(4,
     & (/15,13,16,14/), 
     & (/24,25,26,27/),
     & TMP, W, AMP(1,29))
      CALL VVV5P1N_3(W(1,1), W(1,35), GC_3, TMP(1))
      call CombineAmp(4,
     & (/11,9,12,10/), 
     & (/24,25,26,27/),
     & TMP, W, AMP(1,29))
      CALL VVV5P1N_3(W(1,2), W(1,34), GC_3, TMP(1))
      call CombineAmp(4,
     & (/7,5,8,6/), 
     & (/24,25,26,27/),
     & TMP, W, AMP(1,29))
      CALL VVV5P1N_3(W(1,2), W(1,35), GC_3, TMP(1))
      call CombineAmp(4,
     & (/3,1,4,2/), 
     & (/24,25,26,27/),
     & TMP, W, AMP(1,29)) ! count 1
      CALL VVVV8_3(W(1,1),W(1,3),W(1,7),GC_5,MDL_MW, FK_MDL_WW,W(1,80)) ! count 8
      CALL VVVV8_3(W(1,1),W(1,4),W(1,7),GC_5,MDL_MW, FK_MDL_WW,W(1,81)) ! count 8
      CALL VVVV8_3(W(1,2),W(1,3),W(1,7),GC_5,MDL_MW, FK_MDL_WW,W(1,82)) ! count 8
      CALL VVVV8_3(W(1,2),W(1,4),W(1,7),GC_5,MDL_MW, FK_MDL_WW,W(1,83)) ! count 8
      CALL VVS4P1N_2(W(1,10), W(1,15), GC_266, TMP(1))
      call CombineAmp(4,
     & (/15,11,7,3/), 
     & (/80,81,82,83/),
     & TMP, W, AMP(1,30))
      CALL VVS4P1N_2(W(1,10), W(1,16), GC_266, TMP(1))
      call CombineAmp(4,
     & (/13,9,5,1/), 
     & (/80,81,82,83/),
     & TMP, W, AMP(1,30))
      CALL VVS4P1N_2(W(1,10), W(1,17), GC_266, TMP(1))
      call CombineAmp(4,
     & (/16,12,8,4/), 
     & (/80,81,82,83/),
     & TMP, W, AMP(1,30))
      CALL VVS4P1N_2(W(1,10), W(1,18), GC_266, TMP(1))
      call CombineAmp(4,
     & (/14,10,6,2/), 
     & (/80,81,82,83/),
     & TMP, W, AMP(1,30)) ! count 1
      CALL VVS3P1N_2(W(1,10), W(1,15), GC_283, TMP(1))
      call CombineAmp(4,
     & (/15,11,7,3/), 
     & (/80,81,82,83/),
     & TMP, W, AMP(1,31))
      CALL VVS3P1N_2(W(1,10), W(1,16), GC_283, TMP(1))
      call CombineAmp(4,
     & (/13,9,5,1/), 
     & (/80,81,82,83/),
     & TMP, W, AMP(1,31))
      CALL VVS3P1N_2(W(1,10), W(1,17), GC_283, TMP(1))
      call CombineAmp(4,
     & (/16,12,8,4/), 
     & (/80,81,82,83/),
     & TMP, W, AMP(1,31))
      CALL VVS3P1N_2(W(1,10), W(1,18), GC_283, TMP(1))
      call CombineAmp(4,
     & (/14,10,6,2/), 
     & (/80,81,82,83/),
     & TMP, W, AMP(1,31)) ! count 1
      CALL VVVV8_4(W(1,1),W(1,3),W(1,10),GC_5,MDL_MW, FK_MDL_WW,W(1,84)) ! count 8
      CALL VVVV8_4(W(1,1),W(1,4),W(1,10),GC_5,MDL_MW, FK_MDL_WW,W(1,85)) ! count 8
      CALL VVVV8_4(W(1,2),W(1,3),W(1,10),GC_5,MDL_MW, FK_MDL_WW,W(1,86)) ! count 8
      CALL VVVV8_4(W(1,2),W(1,4),W(1,10),GC_5,MDL_MW, FK_MDL_WW,W(1,87)) ! count 8
      CALL VVS4P1N_1(W(1,7), W(1,15), GC_266, TMP(1))
      call CombineAmp(4,
     & (/15,11,7,3/), 
     & (/84,85,86,87/),
     & TMP, W, AMP(1,32))
      CALL VVS4P1N_1(W(1,7), W(1,16), GC_266, TMP(1))
      call CombineAmp(4,
     & (/13,9,5,1/), 
     & (/84,85,86,87/),
     & TMP, W, AMP(1,32))
      CALL VVS4P1N_1(W(1,7), W(1,17), GC_266, TMP(1))
      call CombineAmp(4,
     & (/16,12,8,4/), 
     & (/84,85,86,87/),
     & TMP, W, AMP(1,32))
      CALL VVS4P1N_1(W(1,7), W(1,18), GC_266, TMP(1))
      call CombineAmp(4,
     & (/14,10,6,2/), 
     & (/84,85,86,87/),
     & TMP, W, AMP(1,32)) ! count 1
      CALL VVS3P1N_1(W(1,7), W(1,15), GC_283, TMP(1))
      call CombineAmp(4,
     & (/15,11,7,3/), 
     & (/84,85,86,87/),
     & TMP, W, AMP(1,33))
      CALL VVS3P1N_1(W(1,7), W(1,16), GC_283, TMP(1))
      call CombineAmp(4,
     & (/13,9,5,1/), 
     & (/84,85,86,87/),
     & TMP, W, AMP(1,33))
      CALL VVS3P1N_1(W(1,7), W(1,17), GC_283, TMP(1))
      call CombineAmp(4,
     & (/16,12,8,4/), 
     & (/84,85,86,87/),
     & TMP, W, AMP(1,33))
      CALL VVS3P1N_1(W(1,7), W(1,18), GC_283, TMP(1))
      call CombineAmp(4,
     & (/14,10,6,2/), 
     & (/84,85,86,87/),
     & TMP, W, AMP(1,33)) ! count 1
      CALL VVSS4_3(W(1,1),W(1,3),W(1,15),GC_219,MDL_MH, FK_MDL_WH,W(1,88)) ! count 1
      CALL VVSS4_3(W(1,1),W(1,3),W(1,16),GC_219,MDL_MH, FK_MDL_WH,W(1,89)) ! count 1
      CALL VVSS4_3(W(1,1),W(1,3),W(1,17),GC_219,MDL_MH, FK_MDL_WH,W(1,90)) ! count 1
      CALL VVSS4_3(W(1,1),W(1,3),W(1,18),GC_219,MDL_MH, FK_MDL_WH,W(1,91)) ! count 1
      CALL VVSS4_3(W(1,2),W(1,4),W(1,15),GC_219,MDL_MH, FK_MDL_WH,W(1,100)) ! count 1
      CALL VVSS4_3(W(1,2),W(1,4),W(1,16),GC_219,MDL_MH, FK_MDL_WH,W(1,101)) ! count 1
      CALL VVSS4_3(W(1,2),W(1,4),W(1,17),GC_219,MDL_MH, FK_MDL_WH,W(1,102)) ! count 1
      CALL VVSS4_3(W(1,2),W(1,4),W(1,18),GC_219,MDL_MH, FK_MDL_WH,W(1,103)) ! count 1
      CALL VVS3P1N_3(W(1,10), W(1,7), GC_283, TMP(1))
      call CombineAmpS(8, 
     &(/15,13,16,14,3,1,4,2/), 
     & (/88,89,90,91,100,101,102,103/), 
     & TMP, W, AMP(1,34)) ! count 1
      CALL VVVV8P0_1(W(1,1),W(1,10),W(1,7),GC_5,ZERO, FK_ZERO,W(1,104)) ! count 8
      CALL VVVV8P0_1(W(1,2),W(1,10),W(1,7),GC_5,ZERO, FK_ZERO,W(1,105)) ! count 8
      CALL VVS4P1N_3(W(1,3), W(1,104), GC_328, TMP(1))
      call CombineAmpS(4, 
     &(/15,13,16,14/), 
     & (/15,16,17,18/), 
     & TMP, W, AMP(1,35))
      CALL VVS4P1N_3(W(1,3), W(1,105), GC_328, TMP(1))
      call CombineAmpS(4, 
     &(/7,5,8,6/), 
     & (/15,16,17,18/), 
     & TMP, W, AMP(1,35))
      CALL VVS4P1N_3(W(1,4), W(1,104), GC_328, TMP(1))
      call CombineAmpS(4, 
     &(/11,9,12,10/), 
     & (/15,16,17,18/), 
     & TMP, W, AMP(1,35))
      CALL VVS4P1N_3(W(1,4), W(1,105), GC_328, TMP(1))
      call CombineAmpS(4, 
     &(/3,1,4,2/), 
     & (/15,16,17,18/), 
     & TMP, W, AMP(1,35)) ! count 1
      CALL VVVV11_4(W(1,1),W(1,10),W(1,7),GC_138,MDL_MZ, ZERO,W(1,106)) ! count 8
      CALL VVVV11_4(W(1,2),W(1,10),W(1,7),GC_138,MDL_MZ, ZERO,W(1,107)) ! count 8
      CALL VVS4P1N_3(W(1,3), W(1,106), GC_320, TMP(1))
      call CombineAmpS(4, 
     &(/15,13,16,14/), 
     & (/15,16,17,18/), 
     & TMP, W, AMP(1,36))
      CALL VVS4P1N_3(W(1,3), W(1,107), GC_320, TMP(1))
      call CombineAmpS(4, 
     &(/7,5,8,6/), 
     & (/15,16,17,18/), 
     & TMP, W, AMP(1,36))
      CALL VVS4P1N_3(W(1,4), W(1,106), GC_320, TMP(1))
      call CombineAmpS(4, 
     &(/11,9,12,10/), 
     & (/15,16,17,18/), 
     & TMP, W, AMP(1,36))
      CALL VVS4P1N_3(W(1,4), W(1,107), GC_320, TMP(1))
      call CombineAmpS(4, 
     &(/3,1,4,2/), 
     & (/15,16,17,18/), 
     & TMP, W, AMP(1,36)) ! count 1
      CALL VVVS6_2(W(1,1),W(1,7),W(1,15),GC_272,MDL_MW, ZERO,W(1,108)) ! count 2
      CALL VVVS6_2(W(1,1),W(1,7),W(1,16),GC_272,MDL_MW, ZERO,W(1,109)) ! count 2
      CALL VVVS6_2(W(1,1),W(1,7),W(1,17),GC_272,MDL_MW, ZERO,W(1,110)) ! count 2
      CALL VVVS6_2(W(1,1),W(1,7),W(1,18),GC_272,MDL_MW, ZERO,W(1,111)) ! count 2
      CALL VVVS6_2(W(1,2),W(1,7),W(1,15),GC_272,MDL_MW, ZERO,W(1,112)) ! count 2
      CALL VVVS6_2(W(1,2),W(1,7),W(1,16),GC_272,MDL_MW, ZERO,W(1,113)) ! count 2
      CALL VVVS6_2(W(1,2),W(1,7),W(1,17),GC_272,MDL_MW, ZERO,W(1,114)) ! count 2
      CALL VVVS6_2(W(1,2),W(1,7),W(1,18),GC_272,MDL_MW, ZERO,W(1,115)) ! count 2
      CALL VVV5P1N_3(W(1,3), W(1,10), GC_3, TMP(1))
      call CombineAmp(8,
     & (/15,13,16,14,7,5,8,6/), 
     & (/108,109,110,111,112,113,114,115/),
     & TMP, W, AMP(1,37))
      CALL VVV5P1N_3(W(1,4), W(1,10), GC_3, TMP(1))
      call CombineAmp(8,
     & (/11,9,12,10,3,1,4,2/), 
     & (/108,109,110,111,112,113,114,115/),
     & TMP, W, AMP(1,37)) ! count 1
      CALL VVVS6_3(W(1,1),W(1,10),W(1,15),GC_272,MDL_MW, ZERO,W(1,116)) ! count 2
      CALL VVVS6_3(W(1,1),W(1,10),W(1,16),GC_272,MDL_MW, ZERO,W(1,117)) ! count 2
      CALL VVVS6_3(W(1,1),W(1,10),W(1,17),GC_272,MDL_MW, ZERO,W(1,118)) ! count 2
      CALL VVVS6_3(W(1,1),W(1,10),W(1,18),GC_272,MDL_MW, ZERO,W(1,119)) ! count 2
      CALL VVVS6_3(W(1,2),W(1,10),W(1,15),GC_272,MDL_MW, ZERO,W(1,120)) ! count 2
      CALL VVVS6_3(W(1,2),W(1,10),W(1,16),GC_272,MDL_MW, ZERO,W(1,121)) ! count 2
      CALL VVVS6_3(W(1,2),W(1,10),W(1,17),GC_272,MDL_MW, ZERO,W(1,122)) ! count 2
      CALL VVVS6_3(W(1,2),W(1,10),W(1,18),GC_272,MDL_MW, ZERO,W(1,123)) ! count 2
      CALL VVV5P1N_2(W(1,3), W(1,7), GC_3, TMP(1))
      call CombineAmp(8,
     & (/15,13,16,14,7,5,8,6/), 
     & (/116,117,118,119,120,121,122,123/),
     & TMP, W, AMP(1,38))
      CALL VVV5P1N_2(W(1,4), W(1,7), GC_3, TMP(1))
      call CombineAmp(8,
     & (/11,9,12,10,3,1,4,2/), 
     & (/116,117,118,119,120,121,122,123/),
     & TMP, W, AMP(1,38)) ! count 1
      DO K = 1, NCOMB
        
        JAMP(1,1) = AMP( K,1)+AMP( K,2)+AMP( K,3)+AMP( K,4)+AMP( K,5)+AM
     $  P( K,6)+AMP( K,7) +AMP( K,8)+AMP( K,9)+AMP( K,10)+AMP( K,11)+AMP( K,12)+
     $  AMP( K,13)+AMP( K,14)+AMP( K,15) +AMP( K,16)+AMP( K,17)+AMP( K,18)+AMP( 
     $  K,19)+AMP( K,20)+AMP( K,21)+AMP( K,22)+AMP( K,23) +AMP( K,24)+AMP( K,25)
     $  +AMP( K,26)+AMP( K,27)+AMP( K,28)+AMP( K,29)+AMP( K,30)+AMP( K,31) +AMP(
     $   K,32)+AMP( K,33)+AMP( K,34)+AMP( K,35)+AMP( K,36)+AMP( K,37)+AMP( K,38)
     $  

        TS(K) = 0.D0 
        DO M = 1, NAMPSO
          DO I = 1, NCOLOR
            ZTEMP = (0.D0,0.D0)
            DO J = 1, NCOLOR
              ZTEMP = ZTEMP + CF(J,I)*JAMP(J,M)
            ENDDO
            DO N = 1, NAMPSO

              TS(K) = TS(K) + ZTEMP*DCONJG(JAMP(I,N))

            ENDDO
          ENDDO
        ENDDO
        if(sde_strat.eq.1) then
        
        IF(SDE_STRAT.EQ.1)THEN
          AMP2(2)=AMP2(2)+AMP( K,2)*DCONJG(AMP( K,2))
          AMP2(3)=AMP2(3)+AMP( K,3)*DCONJG(AMP( K,3))
          AMP2(4)=AMP2(4)+AMP( K,4)*DCONJG(AMP( K,4))
          AMP2(6)=AMP2(6)+(AMP( K,6)+AMP( K,7))*DCONJG(AMP( K,6)+AMP( K,
     $    7))
          AMP2(8)=AMP2(8)+(AMP( K,8)+AMP( K,9))*DCONJG(AMP( K,8)+AMP( K,
     $    9))
          AMP2(10)=AMP2(10)+(AMP( K,10)+AMP( K,11))*DCONJG(AMP( K,10)+AM
     $    P( K,11))
          AMP2(13)=AMP2(13)+(AMP( K,13)+AMP( K,14))*DCONJG(AMP( K,13)+AM
     $    P( K,14))
          AMP2(15)=AMP2(15)+(AMP( K,15)+AMP( K,16))*DCONJG(AMP( K,15)+AM
     $    P( K,16))
          AMP2(17)=AMP2(17)+(AMP( K,17)+AMP( K,18))*DCONJG(AMP( K,17)+AM
     $    P( K,18))
          AMP2(20)=AMP2(20)+(AMP( K,20)+AMP( K,21))*DCONJG(AMP( K,20)+AM
     $    P( K,21))
          AMP2(22)=AMP2(22)+(AMP( K,22)+AMP( K,23))*DCONJG(AMP( K,22)+AM
     $    P( K,23))
          AMP2(26)=AMP2(26)+(AMP( K,26)+AMP( K,27))*DCONJG(AMP( K,26)+AM
     $    P( K,27))
          AMP2(28)=AMP2(28)+(AMP( K,28)+AMP( K,29))*DCONJG(AMP( K,28)+AM
     $    P( K,29))
        ENDIF

        endif
        Do I = 1, NCOLOR
          DO M = 1, NAMPSO
            DO N = 1, NAMPSO

              Jamp2(i)=Jamp2(i)+DABS(DBLE(Jamp(i,m)*dconjg(Jamp(i,n))))

            enddo
          enddo
        Enddo
      ENDDO

      END


      SUBROUTINE PRINT_ZERO_AMP_1()

      integer i
      i =1
      return
      end
C     Set of functions to handle the array indices of the split orders


      INTEGER FUNCTION SQSOINDEX1(ORDERINDEXA, ORDERINDEXB)
C     
C     This functions plays the role of the interference matrix. It can
C      be hardcoded or 
C     made more elegant using hashtables if its execution speed ever
C      becomes a relevant
C     factor. From two split order indices, it return the
C      corresponding index in the squared 
C     order canonical ordering.
C     
C     CONSTANTS
C     

      INTEGER    NSO, NSQUAREDSO, NAMPSO
      PARAMETER (NSO=1, NSQUAREDSO=1, NAMPSO=1)
C     
C     ARGUMENTS
C     
      INTEGER ORDERINDEXA, ORDERINDEXB
C     
C     LOCAL VARIABLES
C     
      INTEGER I, SQORDERS(NSO)
      INTEGER AMPSPLITORDERS(NAMPSO,NSO)
      DATA (AMPSPLITORDERS(  1,i),i=  1,  1) /    1/
      COMMON/AMPSPLITORDERS1/AMPSPLITORDERS
C     
C     FUNCTION
C     
      INTEGER SOINDEX_FOR_SQUARED_ORDERS1
C     
C     BEGIN CODE
C     
      DO I=1,NSO
        SQORDERS(I)=AMPSPLITORDERS(ORDERINDEXA,I)
     $   +AMPSPLITORDERS(ORDERINDEXB,I)
      ENDDO
      SQSOINDEX1=SOINDEX_FOR_SQUARED_ORDERS1(SQORDERS)
      END

      INTEGER FUNCTION SOINDEX_FOR_SQUARED_ORDERS1(ORDERS)
C     
C     This functions returns the integer index identifying the squared
C      split orders list passed in argument which corresponds to the
C      values of the following list of couplings (and in this order).
C     []
C     
C     CONSTANTS
C     
      INTEGER    NSO, NSQSO, NAMPSO
      PARAMETER (NSO=1, NSQSO=1, NAMPSO=1)
C     
C     ARGUMENTS
C     
      INTEGER ORDERS(NSO)
C     
C     LOCAL VARIABLES
C     
      INTEGER I,J
      INTEGER SQSPLITORDERS(NSQSO,NSO)
      DATA (SQSPLITORDERS(  1,i),i=  1,  1) /    2/
      COMMON/SQPLITORDERS1/SQPLITORDERS
C     
C     BEGIN CODE
C     
      DO I=1,NSQSO
        DO J=1,NSO
          IF (ORDERS(J).NE.SQSPLITORDERS(I,J)) GOTO 1009
        ENDDO
        SOINDEX_FOR_SQUARED_ORDERS1 = I
        RETURN
 1009   CONTINUE
      ENDDO

      WRITE(*,*) 'ERROR:: Stopping in function' 
      WRITE(*,*) 'SOINDEX_FOR_SQUARED_ORDERS1'
      WRITE(*,*) 'Could not find squared orders ',(ORDERS(I),I=1,NSO)
      STOP

      END

      SUBROUTINE GET_NSQSO_BORN1(NSQSO)
C     
C     Simple subroutine returning the number of squared split order
C     contributions returned when calling smatrix_split_orders 
C     

      INTEGER    NSQUAREDSO
      PARAMETER  (NSQUAREDSO=1)

      INTEGER NSQSO

      NSQSO=NSQUAREDSO

      END

C     This is the inverse subroutine of SOINDEX_FOR_SQUARED_ORDERS.
C      Not directly useful, but provided nonetheless.
      SUBROUTINE GET_SQUARED_ORDERS_FOR_SOINDEX1(SOINDEX,ORDERS)
C     
C     This functions returns the orders identified by the squared
C      split order index in argument. Order values correspond to
C      following list of couplings (and in this order):
C     []
C     
C     CONSTANTS
C     
      INTEGER    NSO, NSQSO
      PARAMETER (NSO=1, NSQSO=1)
C     
C     ARGUMENTS
C     
      INTEGER SOINDEX, ORDERS(NSO)
C     
C     LOCAL VARIABLES
C     
      INTEGER I
      INTEGER SQPLITORDERS(NSQSO,NSO)
      COMMON/SQPLITORDERS1/SQPLITORDERS	  
C     
C     BEGIN CODE
C     
      IF (SOINDEX.gt.0.and.SOINDEX.le.NSQSO) THEN
        DO I=1,NSO
          ORDERS(I) =  SQPLITORDERS(SOINDEX,I)
        ENDDO
        RETURN
      ENDIF

      WRITE(*,*) 'ERROR:: Stopping function'
     $ //' GET_SQUARED_ORDERS_FOR_SOINDEX1'
      WRITE(*,*) 'Could not find squared orders index ',SOINDEX
      STOP

      END SUBROUTINE

C     This is the inverse subroutine of getting amplitude SO orders.
C      Not directly useful, but provided nonetheless.
      SUBROUTINE GET_ORDERS_FOR_AMPSOINDEX1(SOINDEX,ORDERS)
C     
C     This functions returns the orders identified by the split order
C      index in argument. Order values correspond to following list of
C      couplings (and in this order):
C     []
C     
C     CONSTANTS
C     
      INTEGER    NSO, NAMPSO
      PARAMETER (NSO=1, NAMPSO=1)
C     
C     ARGUMENTS
C     
      INTEGER SOINDEX, ORDERS(NSO)
C     
C     LOCAL VARIABLES
C     
      INTEGER I
      INTEGER AMPSPLITORDERS(NAMPSO,NSO)
      COMMON/AMPSPLITORDERS1/AMPSPLITORDERS
C     
C     BEGIN CODE
C     
      IF (SOINDEX.gt.0.and.SOINDEX.le.NAMPSO) THEN
        DO I=1,NSO
          ORDERS(I) =  AMPSPLITORDERS(SOINDEX,I)
        ENDDO
        RETURN
      ENDIF

      WRITE(*,*) 'ERROR:: Stopping function GET_ORDERS_FOR_AMPSOINDEX1'
      WRITE(*,*) 'Could not find amplitude split orders index ',SOINDEX
      STOP

      END SUBROUTINE

C     This function is not directly useful, but included for
C      completeness
      INTEGER FUNCTION SOINDEX_FOR_AMPORDERS1(ORDERS)
C     
C     This functions returns the integer index identifying the
C      amplitude split orders passed in argument which correspond to
C      the values of the following list of couplings (and in this
C      order):
C     []
C     
C     CONSTANTS
C     
      INTEGER    NSO, NAMPSO
      PARAMETER (NSO=1, NAMPSO=1)
C     
C     ARGUMENTS
C     
      INTEGER ORDERS(NSO)
C     
C     LOCAL VARIABLES
C     
      INTEGER I,J
      INTEGER AMPSPLITORDERS(NAMPSO,NSO)
      COMMON/AMPSPLITORDERS1/AMPSPLITORDERS
C     
C     BEGIN CODE
C     
      DO I=1,NAMPSO
        DO J=1,NSO
          IF (ORDERS(J).NE.AMPSPLITORDERS(I,J)) GOTO 1009
        ENDDO
        SOINDEX_FOR_AMPORDERS1 = I
        RETURN
 1009   CONTINUE
      ENDDO

      WRITE(*,*) 'ERROR:: Stopping function SOINDEX_FOR_AMPORDERS1'
      WRITE(*,*) 'Could not find squared orders ',(ORDERS(I),I=1,NSO)
      STOP

      END

